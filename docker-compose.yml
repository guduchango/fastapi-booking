services:
  # Redis for caching and Celery broker
  redis:
    container_name: reservation-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  # Mailhog for email testing
  mailhog:
    container_name: reservation-mailhog
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - app-network

  # Prometheus for metrics
  prometheus:
    container_name: reservation-prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    container_name: reservation-grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - app-network

  # PostgreSQL database
  postgres:
    container_name: reservation-postgres
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=reservations
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d reservations"]
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin for database management
  pgadmin:
    container_name: reservation-pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - app-network

  # FastAPI application
  app:
    container_name: reservation-api
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg2://admin:admin@postgres:5432/reservations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./app:/app/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery worker
  celery_worker:
    container_name: reservation-celery-worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - CELERY_BROKER_URL=amqp://admin:admin@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - FROM_EMAIL=noreply@example.com
    depends_on:
      - redis
      - rabbitmq
    networks:
      - app-network

  # Celery Flower for monitoring
  flower:
    container_name: reservation-celery-flower
    build:
      context: .
      dockerfile: Dockerfile.worker
    command: celery -A app.worker flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=amqp://admin:admin@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery_worker
    networks:
      - app-network

  # OpenTelemetry Collector
  otel-collector:
    container_name: reservation-otel-collector
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    networks:
      - app-network

  # RabbitMQ for message queue
  rabbitmq:
    container_name: reservation-rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # Locust for performance testing
  locust:
    container_name: reservation-locust
    build:
      context: .
      dockerfile: Dockerfile.locust
    ports:
      - "8089:8089"  # Web UI
    volumes:
      - ./locust:/locust
    networks:
      - app-network
    depends_on:
      - app

  # Locust worker
  locust-worker:
    container_name: reservation-locust-worker
    build:
      context: .
      dockerfile: Dockerfile.locust
    volumes:
      - ./locust:/locust
    depends_on:
      - locust
      - app
    networks:
      - app-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  postgres_data:
  sentry_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge 